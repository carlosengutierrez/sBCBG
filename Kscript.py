#!/usr/bin/python
# -*- coding: utf-8 -*-

#import shlex
# import subprocess
import os
import time

print "*** /!\ For simulations, check that interactive=False in LGNeurons.py ***"
print "*** and that the code to be executed has been made executable: chmod +x toto.py ***"

header = '#!/bin/bash -x \n\n'

execTime = time.localtime()
timeString = str(execTime[0])+'_'+str(execTime[1])+'_'+str(execTime[2])+'_'+str(execTime[3])+'_'+str(execTime[4])

print 'Time:', timeString

global i
i = 0 # total number of jobs launched
nbQueuedJobs = 0 # number of jobs currently in the queue

# processes for one parameterization test:
#----------------------------------------- 
def launchOneParameterizedRun(i):
  # checks that there are not too many jobs launched, otherwise waits
  #readyToGo = False
  #while not readyToGo:
  #  os.system('squeue -u benoit-girard > squeueStatus.txt')

  #  qf = open('squeueStatus.txt','r')
  #  nbQueuedJobs = len(qf.readlines())-1
  #  qf.close()
    
  #  if nbQueuedJobs < 1000:
  #    readyToGo = True
  #    print nbQueuedJobs,"jobs -- Ready to launch job",i
  #  else:
  #    print nbQueuedJobs,"jobs -- Wait"
  #    time.sleep(60)

  # ready to launch a new job:
  IDstring = timeString+'_%05d' %(i)

  print 'Create subdirectory:',IDstring
  os.system('mkdir '+IDstring)
  os.system('cp LGneurons.py '+IDstring+'/')
  os.system('cp testFullBG.py '+IDstring+'/')
  os.system('cp testChannelBG.py '+IDstring+'/')
  os.system('cp solutions_simple_unique.csv '+IDstring+'/')
  os.system('cp __init__.py '+IDstring+'/')
  os.chdir(IDstring)
  os.system('mkdir log')

  # creation of the modelParams.py file that will correspond to the run at hand
  mltstr = '''#!/apps/free/python/2.7.10/bin/python

# defines the value of the parameters that will be used by testFullbG.py
# generated by KScript.py

interactive = False

params = {'nbcpu':    %s,
          'nbCh' :    %d,
          'LG14modelID': %2d,
          'whichTest': '%s', # which test was used to generate the log
          'nbMSN':    %f,
          'nbFSI':    %f,
          'nbSTN':    %f,
          'nbGPe':    %f,
          'nbGPi':    %f,
          'nbCSN':    %f,
          'nbPTN':    %f,
          'nbCMPf':   %f,
          'GMSN':     %4.2f,
          'GFSI':     %4.2f,
          'GSTN':     %4.2f,
          'GGPe':     %4.2f,
          'GGPi':     %4.2f, 
          'IeGPe':    %3.1f,
          'IeGPi':    %3.1f,
          'inDegCSNMSN': 100.,
          'inDegPTNMSN':   1.,
          'inDegCMPfMSN':  1.,
          'inDegFSIMSN':  30., # according to Humphries et al. 2010, 30-150 FSIs->MSN
          'inDegMSNMSN':  70., # according to Koos et al. 2004, cited by Humphries et al., 2010, on avg 3 synpase per MSN-MSN connection
          'inDegSTNMSN':   0.,
          'inDegGPeMSN':   0.,
          'inDegCSNFSI':  50.,
          'inDegPTNFSI':   1.,
          'inDegSTNFSI':   2.,
          'inDegGPeFSI':  25.,
          'inDegCMPfFSI':  9.,
          'inDegFSIFSI':  15., # according to Humphries et al., 2010, 13-63 FSIs->FSI
          'inDegPTNSTN':  25.,
          'inDegCMPfSTN':  9.,
          'inDegGPeSTN':  25.,
          'inDegCMPfGPe':  9.,
          'inDegSTNGPe':   8.,
          'inDegMSNGPe':2644.,
          'inDegGPeGPe':  25.,
          'inDegMSNGPi':2644.,
          'inDegSTNGPi':   8.,
          'inDegGPeGPi':  23.,
          'inDegCMPfGPi':  9.,
          }
''' %(testedParameters['nbcpu'],testedParameters['nbch'],testedParameters['lg14modelid'],testedParameters['whichTest'],testedParameters['nbmsn'],testedParameters['nbfsi'],testedParameters['nbstn'],testedParameters['nbgpe'],testedParameters['nbgpi'],testedParameters['nbcsn'],testedParameters['nbptn'],testedParameters['nbcmpf'],testedParameters['gmsn'],testedParameters['gfsi'],testedParameters['gstn'],testedParameters['ggpe'],testedParameters['ggpi'],testedParameters['iegpe'],testedParameters['iegpi'])

  print 'Write modelParams.py'
  paramsFile = open('modelParams.py','w')
  paramsFile.writelines(mltstr)
  paramsFile.close()
  
  # Create file bg.sh
  bg_lines = ['#!/bin/sh \n',
              'export HOME=\".\" \n',
              'export PATH=\"/opt/klocal/Python-2.7/bin:../bin:../gsl-2.1.install/bin:${PATH}\" \n',
              'export LD_LIBRARY_PATH=\"/opt/klocal/Python-2.7/lib:/opt/klocal/cblas/lib:/opt/local/Python-2.7.3/lib:../lib:../gsl-2.1.install/lib:${LD_LIBRARY_PATH}\" \n',
              'export NEST_DATA_DIR=\"../share/nest\" \n',
              'export PYTHONPATH=\"../lib/python2.7/site-packages\" \n',
              '. ../bin/nest_vars.sh \n',
              'mkdir ./log \n',
              'python '+testedParameters['whichTest']+'.py \n',
              ]
  script = open('bg.sh','w')
  script.writelines(bg_lines)
  script.close()

  pjmOptions = ['#!/bin/bash -x \n',
                '#PJM -m b \n',
                '#PJM -m e \n',
                '#PJM --rsc-list \"rscgrp=small\" \n',
                '#PJM --rsc-list \"node='+testedParameters['nbnodes']+'\" \n',
                '#PJM --rsc-list \"elapse=23:30:00\" \n',
                '#PJM --mpi \"proc='+testedParameters['nbnodes']+'\" \n',
                '#PJM -s \n',
                '#PJM --stg-transfiles all \n',
                '#PJM --mpi \"use-rankdir\" \n',
                '#PJM --stgin \"rank=* ./*.py %r:./\" \n',
                '#PJM --stgin \"rank=* ./bg.sh %r:./\" \n',
                '#PJM --stgin \"rank=* ./*.csv %r:./\" \n',
                '#PJM --stgin-dir \"rank=0 ../../nest-2.12.0-install-gsl/bin 0:../bin recursive=7\" \n',
                '#PJM --stgin-dir \"rank=0 ../../nest-2.12.0-install-gsl/lib 0:../lib recursive=7\" \n',
                '#PJM --stgin-dir \"rank=0 ../../nest-2.12.0-install-gsl/share 0:../share recursive=7\" \n',
                '#PJM --stgin \"rank=0 ../../gsl.tgz 0:../\" \n',
                '#PJM --stgout \"rank=* %r:./log/* ./log/ stgout=all\" \n\n',
                '. /work/system/Env_base \n',
                'export FLIB_FASTOMP=FALSE \n',
                'tar -zxf ../gsl.tgz -C ../ \n',
                'rm -f ../gsl.tgz \n',
                'mpirun -np '+testedParameters['nbnodes']+' sh bg.sh \n',
                'echo \"finish\"',
                #'mpiexec -n 2 sh bg.sh \n',
                #'mpiexec sh bg.sh \n'
               # 'wait \n'
                ]


  # write the script file
  print 'Write PJM script file'
  script = open('my_job.sh','w')
  script.writelines(header)
  script.writelines(pjmOptions)
  script.close()
  
  #os.chdir('..')
  
  # execute the script file
  command = 'pjsub ./my_job.sh'
  print command
  os.system(command)
  print 'owari'

#===============================

my_scale = 1. #scale nodes

# with which additional parameters?
testedParameters={'durationH':    '04',
                  'durationMin':  '00',
                  'nbcpu':'8',#str(int(2*my_scale)),#'8' #number of threads --> up to 8 for K
                  'nbnodes':str(int(2*my_scale)), #number of nodes, cpus
                  'whichTest':'testChannelBG',#'testFullBG',#'testChannelBG',
                  'nbch': 20, #number of channels
                  'lg14modelid':  9,
                  'nbmsn':2644.,
                  'nbfsi':  53.,
                  'nbstn':   8.,
                  'nbgpe':  25.,
                  'nbgpi':  14.,
                  'nbcsn':3000.,
                  'nbptn': 100.,
                  'nbcmpf':  9.,
                  'gmsn':    4.,
                  'gfsi':    1.,
                  'gstn':    1.4,
                  'ggpe':    1.,
                  'ggpi':    1.,
                  'iegpe':  11.,
                  'iegpi':  11.,
                  }

testedParametersIntervals = {}

testedParametersIntervals['lg14modelid']=[9.]
testedParametersIntervals['nbmsn']=[2644.]
testedParametersIntervals['nbfsi']=[  53.]
testedParametersIntervals['nbstn']=[   8.]
testedParametersIntervals['nbgpe']=[  25.]
testedParametersIntervals['nbgpi']=[  14.]
testedParametersIntervals['nbcsn']=[3000.]
testedParametersIntervals['nbptn']=[ 100.]
testedParametersIntervals['nbcmpf']=[  9.]
testedParametersIntervals['gmsn']=[4.]
testedParametersIntervals['gfsi']=[1.]
testedParametersIntervals['gstn']=[1.4]
testedParametersIntervals['ggpe']=[1.]
testedParametersIntervals['ggpi']=[1.]
testedParametersIntervals['iegpe']=[11.]
testedParametersIntervals['iegpi']=[11.]

'''
testedParametersIntervals['gmsn']=[2.,3.,4.]
testedParametersIntervals['gfsi']=[1., 1.1, 1.2]
testedParametersIntervals['gstn']=[1., 1.1, 1.2,1.3,1.4]
testedParametersIntervals['ggpe']=[1., 1.1, 1.2]
testedParametersIntervals['ggpi']=[1., 1.1, 1.2]
testedParametersIntervals['iegpe']=[11.,12.,13.]
testedParametersIntervals['iegpi']=[10.,11.,12.]
'''

ftp = open(timeString+'_testedParameter.txt','w')
for k,vlist in testedParametersIntervals.iteritems():
  ftp.writelines(str(k)+' '+str(vlist)+'\n')
ftp.close()

#------------------------------
# recursive exploration of all parameter combinations defined in pdict dictionary
#------------------------------
def recParamExplo(pdict):
  if len(pdict)>0:
    paramK = pdict.keys()[0]
    calldict = pdict.copy()
    del calldict[paramK]
    for v in pdict[paramK]:
      testedParameters[paramK]=v
      recParamExplo(calldict)
  else:
    global i
    launchOneParameterizedRun(i)
    #print i,"->",testedParameters
    i+= 1

recParamExplo(testedParametersIntervals)

